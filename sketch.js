// Generated by CoffeeScript 1.11.1
var Game, game, mousePressed, setup, xdraw;

game = 0;

Game = (function() {
  function Game(width1, height1) {
    this.width = width1;
    this.height = height1;
    this.level = 1;
    this.init(0);
    this.start = Date.now();
    this.stopp = Date.now();
  }

  Game.prototype.init = function(dlevel) {
    this.level += dlevel;
    this.level = constrain(this.level, 1, 64);
    this.circles = [];
    this.marked = null;
    this.select_colors();
    return this.stopp = Date.now();
  };

  Game.prototype.select_colors = function() {
    var b, col, colors, g, i, index, j, k, l, len, len1, len2, len3, m, n, o, p, r, radius, ref, ref1, ref2, ref3, results;
    if (this.level <= 26) {
      n = 3;
    } else {
      n = 4;
    }
    radius = width / (1.5 + this.level);
    colors = [];
    ref = range(n);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      ref1 = range(n);
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        ref2 = range(n);
        for (o = 0, len2 = ref2.length; o < len2; o++) {
          k = ref2[o];
          r = int(255 * i / (n - 1));
          g = int(255 * j / (n - 1));
          b = int(255 * k / (n - 1));
          if (i + j + k > 0) {
            colors.push(color(r, g, b, 128));
          }
        }
      }
    }
    print(colors);
    ref3 = range(this.level);
    results = [];
    for (p = 0, len3 = ref3.length; p < len3; p++) {
      i = ref3[p];
      index = int(random(0, colors.length - 1));
      col = colors[index];
      colors.splice(index, 1);
      this.circles.push(new Circle(col, radius, this.circles));
      results.push(this.circles.push(new Circle(col, radius, this.circles)));
    }
    return results;
  };

  Game.prototype.mousePressed = function() {
    var c, cc, circle, count, i, index, l, len, n, ref;
    n = this.circles.length;
    count = 0;
    ref = this.circles;
    for (i = l = 0, len = ref.length; l < len; i = ++l) {
      c = ref[i];
      if (c.within(mouseX, mouseY)) {
        cc = c;
        index = i;
        count += 1;
      }
    }
    this.circles = (function() {
      var len1, m, ref1, results;
      ref1 = this.circles;
      results = [];
      for (i = m = 0, len1 = ref1.length; m < len1; i = ++m) {
        circle = ref1[i];
        if (i !== index) {
          results.push(circle);
        }
      }
      return results;
    }).call(this);
    if (count !== 1) {
      this.init(-1);
      return;
    }
    if (this.marked === null) {
      return this.marked = cc.col;
    } else if (cc.col === this.marked) {
      this.marked = null;
      if (this.circles.length === 0) {
        return this.init(1);
      }
    } else {
      return this.init(-1);
    }
  };

  return Game;

})();

setup = function() {
  createCanvas(windowWidth, windowHeight);
  game = new Game(windowWidth, windowHeight);
  textSize(24);
  textAlign(CENTER, CENTER);
  return xdraw();
};

xdraw = function() {
  var c, l, len, ref;
  background(0);
  ref = game.circles;
  for (l = 0, len = ref.length; l < len; l++) {
    c = ref[l];
    c.draw();
  }
  fill(255, 255, 255, 127);
  sc();
  sw(1);
  return text("Level " + game.level + " in " + (game.stopp - game.start) + " milliseconds", width / 2, height - 50);
};

mousePressed = function() {
  game.mousePressed();
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQTs7QUFBQSxJQUFBLEdBQU87O0FBRUQ7RUFDUyxjQUFDLE1BQUQsRUFBUSxPQUFSO0lBQUMsSUFBQyxDQUFBLFFBQUQ7SUFBTyxJQUFDLENBQUEsU0FBRDtJQUNyQixJQUFDLENBQUEsS0FBRCxHQUFTO0lBQ1QsSUFBQyxDQUFBLElBQUQsQ0FBTSxDQUFOO0lBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFJLENBQUMsR0FBTCxDQUFBO0lBQ1QsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFJLENBQUMsR0FBTCxDQUFBO0VBSkk7O2lCQU1kLElBQUEsR0FBTyxTQUFDLE1BQUQ7SUFDTixJQUFDLENBQUEsS0FBRCxJQUFVO0lBQ1YsSUFBQyxDQUFBLEtBQUQsR0FBUyxTQUFBLENBQVUsSUFBQyxDQUFBLEtBQVgsRUFBaUIsQ0FBakIsRUFBbUIsRUFBbkI7SUFDVCxJQUFDLENBQUEsT0FBRCxHQUFXO0lBQ1gsSUFBQyxDQUFBLE1BQUQsR0FBVTtJQUNWLElBQUMsQ0FBQSxhQUFELENBQUE7V0FDQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksQ0FBQyxHQUFMLENBQUE7RUFOSDs7aUJBUVAsYUFBQSxHQUFnQixTQUFBO0FBQ2YsUUFBQTtJQUFBLElBQUcsSUFBQyxDQUFBLEtBQUQsSUFBVSxFQUFiO01BQ0MsQ0FBQSxHQUFFLEVBREg7S0FBQSxNQUFBO01BR0MsQ0FBQSxHQUFFLEVBSEg7O0lBSUEsTUFBQSxHQUFTLEtBQUEsR0FBTSxDQUFDLEdBQUEsR0FBSSxJQUFDLENBQUEsS0FBTjtJQUNmLE1BQUEsR0FBUztBQUNUO0FBQUEsU0FBQSxxQ0FBQTs7QUFDQztBQUFBLFdBQUEsd0NBQUE7O0FBQ0M7QUFBQSxhQUFBLHdDQUFBOztVQUNDLENBQUEsR0FBSSxHQUFBLENBQUksR0FBQSxHQUFJLENBQUosR0FBTSxD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SUFBSSxDQUFDLEtBQWpCLENBQXpCLEdBQWdELGVBQXJELEVBQXFFLEtBQUEsR0FBTSxDQUEzRSxFQUE4RSxNQUFBLEdBQU8sRUFBckY7QUFQTzs7QUFTUixZQUFBLEdBQWUsU0FBQTtFQUNkLElBQUksQ0FBQyxZQUFMLENBQUE7U0FDQSxLQUFBLENBQUE7QUFGYyIsInNvdXJjZXNDb250ZW50IjpbImdhbWUgPSAwIFxyXG5cclxuY2xhc3MgR2FtZVxyXG5cdGNvbnN0cnVjdG9yIDogKEB3aWR0aCxAaGVpZ2h0KSAtPlxyXG5cdFx0QGxldmVsID0gMVxyXG5cdFx0QGluaXQgMFxyXG5cdFx0QHN0YXJ0ID0gRGF0ZS5ub3coKVxyXG5cdFx0QHN0b3BwID0gRGF0ZS5ub3coKVxyXG5cclxuXHRpbml0IDogKGRsZXZlbCkgLT5cclxuXHRcdEBsZXZlbCArPSBkbGV2ZWxcclxuXHRcdEBsZXZlbCA9IGNvbnN0cmFpbiBAbGV2ZWwsMSw2NFxyXG5cdFx0QGNpcmNsZXMgPSBbXVxyXG5cdFx0QG1hcmtlZCA9IG51bGwgIyBNYXJrZWQgQ2lyY2xlXHJcblx0XHRAc2VsZWN0X2NvbG9ycygpXHJcblx0XHRAc3RvcHAgPSBEYXRlLm5vdygpXHJcblx0XHRcdFxyXG5cdHNlbGVjdF9jb2xvcnMgOiAtPlxyXG5cdFx0aWYgQGxldmVsIDw9IDI2XHJcblx0XHRcdG49M1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRuPTRcclxuXHRcdHJhZGl1cyA9IHdpZHRoLygxLjUrQGxldmVsKVxyXG5cdFx0Y29sb3JzID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIG5cclxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgblxyXG5cdFx0XHRcdGZvciBrIGluIHJhbmdlIG5cclxuXHRcdFx0XHRcdHIgPSBpbnQgMjU1KmkvKG4tMSlcclxuXHRcdFx0XHRcdGcgPSBpbnQgMjU1KmovKG4tMSlcclxuXHRcdFx0XHRcdGIgPSBpbnQgMjU1KmsvKG4tMSlcclxuXHRcdFx0XHRcdGlmIGkraitrPjBcclxuXHRcdFx0XHRcdFx0Y29sb3JzLnB1c2ggY29sb3IgcixnLGIsMTI4XHJcblx0XHRwcmludCBjb2xvcnNcclxuXHRcdGZvciBpIGluIHJhbmdlIEBsZXZlbFxyXG5cdFx0XHRpbmRleCA9IGludCByYW5kb20gMCxjb2xvcnMubGVuZ3RoLTFcclxuXHRcdFx0Y29sID0gY29sb3JzW2luZGV4XVxyXG5cdFx0XHRjb2xvcnMuc3BsaWNlIGluZGV4LDFcclxuXHRcdFx0QGNpcmNsZXMucHVzaCBuZXcgQ2lyY2xlKGNvbCxyYWRpdXMsQGNpcmNsZXMpXHJcblx0XHRcdEBjaXJjbGVzLnB1c2ggbmV3IENpcmNsZShjb2wscmFkaXVzLEBjaXJjbGVzKVxyXG5cclxuXHRtb3VzZVByZXNzZWQgOiAtPlxyXG5cdFx0IyBZb3UgbXVzdCBvbmx5IG1hcmsgb25lIGNpcmNsZVxyXG5cdFx0IyBUaGUgc2Vjb25kIGNpcmNsZSBtdXN0IGhhdmUgdGhlIHNhbWUgY29sb3IgYXMgdGhlIGZpcnN0IG9uZS5cclxuXHRcdG4gPSBAY2lyY2xlcy5sZW5ndGhcclxuXHRcdGNvdW50ID0gMCBcclxuXHRcdGZvciBjLGkgaW4gQGNpcmNsZXNcclxuXHRcdFx0aWYgYy53aXRoaW4gbW91c2VYLG1vdXNlWVxyXG5cdFx0XHRcdGNjID0gYyBcclxuXHRcdFx0XHRpbmRleCA9IGlcdFx0XHJcblx0XHRcdFx0Y291bnQgKz0gMVxyXG5cclxuXHRcdEBjaXJjbGVzID0gKGNpcmNsZSBmb3IgY2lyY2xlLGkgaW4gQGNpcmNsZXMgd2hlbiBpICE9IGluZGV4KVxyXG5cdFx0aWYgY291bnQgIT0gMVxyXG5cdFx0XHRAaW5pdCAtMVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpZiBAbWFya2VkID09IG51bGxcclxuXHRcdFx0QG1hcmtlZCA9IGNjLmNvbFxyXG5cdFx0ZWxzZSBpZiBjYy5jb2wgPT0gQG1hcmtlZFxyXG5cdFx0XHRAbWFya2VkID0gbnVsbFxyXG5cdFx0XHRpZiBAY2lyY2xlcy5sZW5ndGggPT0gMCBcclxuXHRcdFx0XHRAaW5pdCAxICMgV2luXHJcblx0XHRlbHNlXHJcblx0XHRcdEBpbml0IC0xICMgTG9zZVxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyB3aW5kb3dXaWR0aCx3aW5kb3dIZWlnaHRcclxuXHRnYW1lID0gbmV3IEdhbWUgd2luZG93V2lkdGgsd2luZG93SGVpZ2h0IFxyXG5cdHRleHRTaXplIDI0XHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHR4ZHJhdygpXHJcblx0XHRcdFx0XHRcclxueGRyYXcgPSAtPlxyXG5cdGJhY2tncm91bmQgMFxyXG5cdGZvciBjIGluIGdhbWUuY2lyY2xlc1xyXG5cdFx0Yy5kcmF3KClcclxuXHRmaWxsIDI1NSwyNTUsMjU1LDEyN1xyXG5cdHNjKClcclxuXHRzdyAxXHJcblx0dGV4dCBcIkxldmVsICN7Z2FtZS5sZXZlbH0gaW4gI3tnYW1lLnN0b3BwLWdhbWUuc3RhcnR9IG1pbGxpc2Vjb25kc1wiLCB3aWR0aC8yLCBoZWlnaHQtNTBcclxuXHJcbm1vdXNlUHJlc3NlZCA9IC0+XHJcblx0Z2FtZS5tb3VzZVByZXNzZWQoKVxyXG5cdHhkcmF3KCkiXX0=
//# sourceURL=C:\github\ColorPair\sketch.coffee