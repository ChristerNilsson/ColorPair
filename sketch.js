// Generated by CoffeeScript 1.11.1
var Game, game, mousePressed, setup, xdraw;

game = 0;

Game = (function() {
  function Game(width1, height1) {
    this.width = width1;
    this.height = height1;
    this.level = 1;
    this.init(0);
    this.start = Date.now();
    this.stopp = Date.now();
  }

  Game.prototype.init = function(dlevel) {
    this.level += dlevel;
    this.level = constrain(this.level, 1, 64);
    this.circles = [];
    this.marked = null;
    this.select_colors();
    return this.stopp = Date.now();
  };

  Game.prototype.select_colors = function() {
    var b, col, colors, g, i, index, j, k, l, len, len1, len2, len3, m, n, o, p, r, radius, ref, ref1, ref2, ref3, results;
    if (this.level <= 27) {
      n = 3;
    } else {
      n = 4;
    }
    radius = width / (1.5 + this.level);
    colors = [];
    ref = range(n);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      ref1 = range(n);
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        ref2 = range(n);
        for (o = 0, len2 = ref2.length; o < len2; o++) {
          k = ref2[o];
          r = int(255 * i / (n - 1));
          g = int(255 * j / (n - 1));
          b = int(255 * k / (n - 1));
          colors.push(color(r, g, b, 128));
        }
      }
    }
    print(colors);
    ref3 = range(this.level);
    results = [];
    for (p = 0, len3 = ref3.length; p < len3; p++) {
      i = ref3[p];
      index = int(random(0, colors.length - 1));
      col = colors[index];
      colors.splice(index, 1);
      this.circles.push(new Circle(col, radius, this.circles));
      results.push(this.circles.push(new Circle(col, radius, this.circles)));
    }
    return results;
  };

  Game.prototype.mousePressed = function() {
    var c, cc, circle, count, i, index, l, len, n, ref;
    n = this.circles.length;
    count = 0;
    ref = this.circles;
    for (i = l = 0, len = ref.length; l < len; i = ++l) {
      c = ref[i];
      if (c.within(mouseX, mouseY)) {
        cc = c;
        index = i;
        count += 1;
      }
    }
    this.circles = (function() {
      var len1, m, ref1, results;
      ref1 = this.circles;
      results = [];
      for (i = m = 0, len1 = ref1.length; m < len1; i = ++m) {
        circle = ref1[i];
        if (i !== index) {
          results.push(circle);
        }
      }
      return results;
    }).call(this);
    if (count !== 1) {
      this.init(-1);
      return;
    }
    if (this.marked === null) {
      return this.marked = cc.col;
    } else if (cc.col === this.marked) {
      this.marked = null;
      if (this.circles.length === 0) {
        return this.init(1);
      }
    } else {
      return this.init(-1);
    }
  };

  return Game;

})();

setup = function() {
  createCanvas(windowWidth, windowHeight);
  game = new Game(windowWidth, windowHeight);
  textSize(24);
  textAlign(CENTER, CENTER);
  return xdraw();
};

xdraw = function() {
  var c, l, len, ref;
  background(0);
  ref = game.circles;
  for (l = 0, len = ref.length; l < len; l++) {
    c = ref[l];
    c.draw();
  }
  fill(255, 255, 255, 127);
  sc();
  sw(1);
  return text("Level " + game.level + " in " + (game.stopp - game.start) + " milliseconds", width / 2, height - 50);
};

mousePressed = function() {
  game.mousePressed();
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQTs7QUFBQSxJQUFBLEdBQU87O0FBRUQ7RUFDUyxjQUFDLE1BQUQsRUFBUSxPQUFSO0lBQUMsSUFBQyxDQUFBLFFBQUQ7SUFBTyxJQUFDLENBQUEsU0FBRDtJQUNyQixJQUFDLENBQUEsS0FBRCxHQUFTO0lBQ1QsSUFBQyxDQUFBLElBQUQsQ0FBTSxDQUFOO0lBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFJLENBQUMsR0FBTCxDQUFBO0lBQ1QsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFJLENBQUMsR0FBTCxDQUFBO0VBSkk7O2lCQU1kLElBQUEsR0FBTyxTQUFDLE1BQUQ7SUFDTixJQUFDLENBQUEsS0FBRCxJQUFVO0lBQ1YsSUFBQyxDQUFBLEtBQUQsR0FBUyxTQUFBLENBQVUsSUFBQyxDQUFBLEtBQVgsRUFBaUIsQ0FBakIsRUFBbUIsRUFBbkI7SUFDVCxJQUFDLENBQUEsT0FBRCxHQUFXO0lBQ1gsSUFBQyxDQUFBLE1BQUQsR0FBVTtJQUNWLElBQUMsQ0FBQSxhQUFELENBQUE7V0FDQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksQ0FBQyxHQUFMLENBQUE7RUFOSDs7aUJBUVAsYUFBQSxHQUFnQixTQUFBO0FBQ2YsUUFBQTtJQUFBLElBQUcsSUFBQyxDQUFBLEtBQUQsSUFBVSxFQUFiO01BQ0MsQ0FBQSxHQUFFLEVBREg7S0FBQSxNQUFBO01BR0MsQ0FBQSxHQUFFLEVBSEg7O0lBSUEsTUFBQSxHQUFTLEtBQUEsR0FBTSxDQUFDLEdBQUEsR0FBSSxJQUFDLENBQUEsS0FBTjtJQUNmLE1BQUEsR0FBUztBQUNUO0FBQUEsU0FBQSxxQ0FBQTs7QUFDQztBQUFBLFdBQUEsd0NBQUE7O0FBQ0M7QUFBQSxhQUFBLHdDQUFBOztVQUNDLENBQUEsR0FBSSxHQUFBLENBQUksR0FBQSxHQUFJLENBQUosR0FBTSxD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QTNFLEVBQThFLE1BQUEsR0FBTyxFQUFyRjtBQVBPOztBQVNSLFlBQUEsR0FBZSxTQUFBO0VBQ2QsSUFBSSxDQUFDLFlBQUwsQ0FBQTtTQUNBLEtBQUEsQ0FBQTtBQUZjIiwic291cmNlc0NvbnRlbnQiOlsiZ2FtZSA9IDAgXHJcblxyXG5jbGFzcyBHYW1lXHJcblx0Y29uc3RydWN0b3IgOiAoQHdpZHRoLEBoZWlnaHQpIC0+XHJcblx0XHRAbGV2ZWwgPSAxXHJcblx0XHRAaW5pdCAwXHJcblx0XHRAc3RhcnQgPSBEYXRlLm5vdygpXHJcblx0XHRAc3RvcHAgPSBEYXRlLm5vdygpXHJcblxyXG5cdGluaXQgOiAoZGxldmVsKSAtPlxyXG5cdFx0QGxldmVsICs9IGRsZXZlbFxyXG5cdFx0QGxldmVsID0gY29uc3RyYWluIEBsZXZlbCwxLDY0XHJcblx0XHRAY2lyY2xlcyA9IFtdXHJcblx0XHRAbWFya2VkID0gbnVsbCAjIE1hcmtlZCBDaXJjbGVcclxuXHRcdEBzZWxlY3RfY29sb3JzKClcclxuXHRcdEBzdG9wcCA9IERhdGUubm93KClcclxuXHRcdFx0XHJcblx0c2VsZWN0X2NvbG9ycyA6IC0+XHJcblx0XHRpZiBAbGV2ZWwgPD0gMjdcclxuXHRcdFx0bj0zXHJcblx0XHRlbHNlXHJcblx0XHRcdG49NFxyXG5cdFx0cmFkaXVzID0gd2lkdGgvKDEuNStAbGV2ZWwpXHJcblx0XHRjb2xvcnMgPSBbXVxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgblxyXG5cdFx0XHRmb3IgaiBpbiByYW5nZSBuXHJcblx0XHRcdFx0Zm9yIGsgaW4gcmFuZ2UgblxyXG5cdFx0XHRcdFx0ciA9IGludCAyNTUqaS8obi0xKVxyXG5cdFx0XHRcdFx0ZyA9IGludCAyNTUqai8obi0xKVxyXG5cdFx0XHRcdFx0YiA9IGludCAyNTUqay8obi0xKVxyXG5cdFx0XHRcdFx0Y29sb3JzLnB1c2ggY29sb3IgcixnLGIsMTI4XHJcblx0XHRwcmludCBjb2xvcnNcclxuXHRcdGZvciBpIGluIHJhbmdlIEBsZXZlbFxyXG5cdFx0XHRpbmRleCA9IGludCByYW5kb20gMCxjb2xvcnMubGVuZ3RoLTFcclxuXHRcdFx0Y29sID0gY29sb3JzW2luZGV4XVxyXG5cdFx0XHRjb2xvcnMuc3BsaWNlIGluZGV4LDFcclxuXHRcdFx0QGNpcmNsZXMucHVzaCBuZXcgQ2lyY2xlKGNvbCxyYWRpdXMsQGNpcmNsZXMpXHJcblx0XHRcdEBjaXJjbGVzLnB1c2ggbmV3IENpcmNsZShjb2wscmFkaXVzLEBjaXJjbGVzKVxyXG5cclxuXHRtb3VzZVByZXNzZWQgOiAtPlxyXG5cdFx0IyBZb3UgbXVzdCBvbmx5IG1hcmsgb25lIGNpcmNsZVxyXG5cdFx0IyBUaGUgc2Vjb25kIGNpcmNsZSBtdXN0IGhhdmUgdGhlIHNhbWUgY29sb3IgYXMgdGhlIGZpcnN0IG9uZS5cclxuXHRcdG4gPSBAY2lyY2xlcy5sZW5ndGhcclxuXHRcdGNvdW50ID0gMCBcclxuXHRcdGZvciBjLGkgaW4gQGNpcmNsZXNcclxuXHRcdFx0aWYgYy53aXRoaW4gbW91c2VYLG1vdXNlWVxyXG5cdFx0XHRcdGNjID0gYyBcclxuXHRcdFx0XHRpbmRleCA9IGlcdFx0XHJcblx0XHRcdFx0Y291bnQgKz0gMVxyXG5cclxuXHRcdEBjaXJjbGVzID0gKGNpcmNsZSBmb3IgY2lyY2xlLGkgaW4gQGNpcmNsZXMgd2hlbiBpICE9IGluZGV4KVxyXG5cdFx0aWYgY291bnQgIT0gMVxyXG5cdFx0XHRAaW5pdCAtMVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpZiBAbWFya2VkID09IG51bGxcclxuXHRcdFx0QG1hcmtlZCA9IGNjLmNvbFxyXG5cdFx0ZWxzZSBpZiBjYy5jb2wgPT0gQG1hcmtlZFxyXG5cdFx0XHRAbWFya2VkID0gbnVsbFxyXG5cdFx0XHRpZiBAY2lyY2xlcy5sZW5ndGggPT0gMCBcclxuXHRcdFx0XHRAaW5pdCAxICMgV2luXHJcblx0XHRlbHNlXHJcblx0XHRcdEBpbml0IC0xICMgTG9zZVxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyB3aW5kb3dXaWR0aCx3aW5kb3dIZWlnaHRcclxuXHRnYW1lID0gbmV3IEdhbWUgd2luZG93V2lkdGgsd2luZG93SGVpZ2h0IFxyXG5cdHRleHRTaXplIDI0XHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHR4ZHJhdygpXHJcblx0XHRcdFx0XHRcclxueGRyYXcgPSAtPlxyXG5cdGJhY2tncm91bmQgMFxyXG5cdGZvciBjIGluIGdhbWUuY2lyY2xlc1xyXG5cdFx0Yy5kcmF3KClcclxuXHRmaWxsIDI1NSwyNTUsMjU1LDEyN1xyXG5cdHNjKClcclxuXHRzdyAxXHJcblx0dGV4dCBcIkxldmVsICN7Z2FtZS5sZXZlbH0gaW4gI3tnYW1lLnN0b3BwLWdhbWUuc3RhcnR9IG1pbGxpc2Vjb25kc1wiLCB3aWR0aC8yLCBoZWlnaHQtNTBcclxuXHJcbm1vdXNlUHJlc3NlZCA9IC0+XHJcblx0Z2FtZS5tb3VzZVByZXNzZWQoKVxyXG5cdHhkcmF3KCkiXX0=
//# sourceURL=C:\github\ColorPair\sketch.coffee