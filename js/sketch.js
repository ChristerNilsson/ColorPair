// Generated by CoffeeScript 1.11.1
var Game, game, keyPressed, mousePressed, setup, xdraw;

game = 0;

Game = (function() {
  function Game(width1, height1) {
    this.width = width1;
    this.height = height1;
    this.level = 1;
    this.ring = true;
    this.stopp = Date.now();
    this.init(0);
  }

  Game.prototype.init = function(dlevel) {
    this.start = this.stopp;
    this.stopp = Date.now();
    this.level += dlevel;
    this.level = constrain(this.level, 1, 64);
    this.circles = [];
    this.marked = null;
    return this.select_colors();
  };

  Game.prototype.select_colors = function() {
    var b, col, colors, g, i, index, j, k, l, len, len1, len2, len3, m, n, o, p, r, radius, ref, ref1, ref2, ref3, results;
    n = 4;
    if (this.level < 3 * 3 * 3) {
      n = 3;
    }
    if (this.level < 2 * 2 * 2) {
      n = 2;
    }
    radius = width / (0.7 + this.level);
    colors = [];
    ref = range(n);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      ref1 = range(n);
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        ref2 = range(n);
        for (o = 0, len2 = ref2.length; o < len2; o++) {
          k = ref2[o];
          r = int(255 * i / (n - 1));
          g = int(255 * j / (n - 1));
          b = int(255 * k / (n - 1));
          if (i + j + k > 0) {
            colors.push(color(r, g, b, 127.5));
          }
        }
      }
    }
    ref3 = range(this.level);
    results = [];
    for (p = 0, len3 = ref3.length; p < len3; p++) {
      i = ref3[p];
      index = int(random(0, colors.length - 1));
      col = colors[index];
      colors.splice(index, 1);
      this.circles.push(new Circle(col, radius, this.circles));
      results.push(this.circles.push(new Circle(col, radius, this.circles)));
    }
    return results;
  };

  Game.prototype.mousePressed = function() {
    var c, cc, circle, count, i, index, l, len, n, ref;
    n = this.circles.length;
    count = 0;
    ref = this.circles;
    for (i = l = 0, len = ref.length; l < len; i = ++l) {
      c = ref[i];
      if (c.within(mouseX, mouseY)) {
        cc = c;
        index = i;
        count += 1;
      }
    }
    this.circles = (function() {
      var len1, m, ref1, results;
      ref1 = this.circles;
      results = [];
      for (i = m = 0, len1 = ref1.length; m < len1; i = ++m) {
        circle = ref1[i];
        if (i !== index) {
          results.push(circle);
        }
      }
      return results;
    }).call(this);
    if (count !== 1) {
      this.init(-1);
      return;
    }
    if (this.marked === null) {
      return this.marked = cc.col;
    } else if (cc.col === this.marked) {
      this.marked = null;
      if (this.circles.length === 0) {
        return this.init(1);
      }
    } else {
      return this.init(-1);
    }
  };

  return Game;

})();

setup = function() {
  createCanvas(windowWidth, windowHeight);
  game = new Game(windowWidth, windowHeight);
  textSize(24);
  textAlign(CENTER, CENTER);
  return xdraw();
};

xdraw = function() {
  var c, l, len, ref;
  background(0);
  ref = game.circles;
  for (l = 0, len = ref.length; l < len; l++) {
    c = ref[l];
    c.draw();
  }
  fill(255, 255, 255, 127);
  sc();
  sw(1);
  return text("Level " + game.level + " in " + (game.stopp - game.start) + " milliseconds", width / 2, height - 50);
};

mousePressed = function() {
  game.mousePressed();
  return xdraw();
};

keyPressed = function() {
  game.ring = !game.ring;
  return xdraw();
};
