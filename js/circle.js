"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Circle, THICKNESS;

THICKNESS = 0.05; // %

Circle = function () {
  function Circle(col, radius, circles) {
    _classCallCheck(this, Circle);

    var c, count, i, len;
    this.col = col;
    this.radius = radius;
    count = 1;
    while (count > 0) {
      this.x = random(width);
      this.y = random(height);
      count = 0;
      for (i = 0, len = circles.length; i < len; i++) {
        c = circles[i];
        if (dist(c.x, c.y, this.x, this.y) < this.radius * 0.4) {
          count += 1;
        }
      }
    }
    this.marked = false;
  }

  _createClass(Circle, [{
    key: "draw",
    value: function draw() {
      if (game.ring) {
        fill(this.col);
        noStroke();
        sw(THICKNESS * this.radius);
        circle(this.x, this.y, (1 - THICKNESS / 2) * this.radius);
        noFill();
        // stroke 255-game.bg,255-game.bg,255-game.bg,225
        stroke(255 - game.bg, 0, 255, 225);
        sw(THICKNESS * this.radius);
        return circle(this.x, this.y, this.radius);
      } else {
        fill(this.col);
        noStroke();
        sw(THICKNESS * this.radius);
        return circle(this.x, this.y, (1 + THICKNESS / 2) * this.radius);
      }
    }
  }, {
    key: "within",
    value: function within(x, y) {
      return dist(this.x, this.y, x, y) < (1 + THICKNESS / 2) * this.radius;
    }
  }]);

  return Circle;
}();
//# sourceMappingURL=circle.js.map
